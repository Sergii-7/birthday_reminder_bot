import aiohttp
from PIL import Image
from io import BytesIO
from typing import Optional, Dict, Union, Any
from aiogram.types import (FSInputFile, ChatMember, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove,
                           ForceReply)
from aiogram.enums import ChatMemberStatus
import os
from config import media_file_path, bot_link
from src.bot_app.create_bot import bot
from src.bot_app.dir_menu.buttons_for_menu import b_my_groups
from src.sql.models import User, Chat, UserChat
from src.sql.func_db import doc_update, get_chats, get_user_chat, create_new_doc, get_chat_with_user, get_user_by_phone
from src.service.service_tools import correct_time, validate_phone
from src.service.loggers.py_logger_tel_bot import get_logger

logger = get_logger(__name__)


async def check_user_in_group(telegram_id: int, chat_id: int) -> bool:
    """ Check user: is he member of the chat """
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫–∞ –≥—Ä—É–ø–∏
        member: ChatMember = await bot.get_chat_member(chat_id=chat_id, user_id=telegram_id)
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —É—á–∞—Å–Ω–∏–∫–∞
        if member.status in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}:
            logger.info(f"User: '{telegram_id}' is member of chat: {chat_id}")
            return True
        else:
            logger.info(f"User: '{telegram_id}' is NOT member of chat: {chat_id}")
            return False
    except Exception as e:
        logger.error(e)
        return False


async def check_user_in_every_chat(user: User) -> Dict[str, int]:
    """ Check: is User member of one or more chats """
    logger.info(f"start check_user_in_every_chat for user: {user.telegram_id}, {user.first_name}")
    new_user_chat, updated_user_chat = 0, 0
    chats = await get_chats()
    for chat in chats:
        if await check_user_in_group(telegram_id=user.telegram_id, chat_id=chat.chat_id):
            user_chat = await get_user_chat(chat_id=chat.id, user_telegram_id=user.telegram_id)
            if user_chat:
                # user_chat.status = True
                user_chat.updated_at = correct_time()
                r = await doc_update(doc=user_chat)
                updated_user_chat = updated_user_chat + 1 if r else updated_user_chat
            else:
                user_chat = {"chat_id": chat.id, "user_telegram_id": user.telegram_id, "status": True}
                r = await create_new_doc(model='user_chat', data=user_chat, data_has_datatime=False)
                new_user_chat = new_user_chat + 1 if r else new_user_chat
    res = {"new_user_chat": new_user_chat, "updated_user_chat": updated_user_chat}
    logger.info(str(res))
    return res


async def get_chat_info(
        admin: User, chat: Chat, get_photo: bool = True) -> Dict[str, Optional[Union[str, FSInputFile]]]:
    """ Get chat info from Telegram and DataBase """
    try:
        chat_data = await bot.get_chat(chat_id=chat.chat_id)
    except Exception as e:
        logger.error(e)
        chat_data = None
    status = await check_user_in_group(telegram_id=admin.telegram_id, chat_id=chat.chat_id)
    if chat.status != status:
        chat.status = status
        chat = await doc_update(doc=chat)
    status_description = "–ì–†–£–ü–ê –ê–ö–¢–ò–í–ù–ê" if status \
        else "<b>‚ö†Ô∏è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –º–æ–∂–ª–∏–≤—ñ - –∞–¥–º—ñ–Ω –∞–±–æ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –Ω–µ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø—É –¥–æ –≥—Ä—É–ø–∏</b>"
    count_users = "–Ω–µ –≤—ñ–¥–æ–º–æ"
    try:
        if status:
            count_users = await bot.get_chat_member_count(chat_id=chat.chat_id) - 1  # –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
    except Exception as e:
        logger.error(e)
    title = f"<b>{chat_data.title}</b>\n" if chat_data else ""
    user_name = f"@{admin.username}\n" if admin.username else ""
    text = (f"chat_id: <code>{chat.chat_id}</code>\n—Å—Ç–∞—Ç—É—Å: {status_description}\n{title}"
            f"–∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤: <b>{count_users}</b>\n<b>–ê–¥–º—ñ–Ω</b>\n–Ü–º'—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º—ñ: "
            f"<b>{admin.first_name}</b>\n—Ç–µ–ª–µ—Ñ–æ–Ω: <code>{admin.phone_number}</code>\n{user_name}")
    photo = None
    if get_photo:
        try:
            if chat_data:
                if chat_data.photo:
                    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–∞–π–ª
                    file_info = await bot.get_file(chat_data.photo.big_file_id)
                    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∏–π –¥–∏—Å–∫
                    file_path = f"{media_file_path}images/chat_photo_{chat.id}.jpg"
                    await bot.download_file(file_info.file_path, file_path)
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–±'—î–∫—Ç FSInputFile –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–∫—É
                    photo = FSInputFile(file_path)
        except Exception as e:
            logger.error(e)
    return {"text": text, "chat_data": chat_data, "photo": photo, "title": title}


def get_user_info(user: User, user_chat: UserChat = None) -> str:
    """ Get user info from User """
    username = f"@{user.username}\n" if user.username else ""
    phone_number = f"—Ç–µ–ª–µ—Ñ–æ–Ω <code>{user.phone_number}</code>\n" if user.phone_number else ""
    if user_chat is None:
        birthday = str(user.birthday)[5:] if user.birthday else '–¥–∞–Ω—ñ –Ω–µ –≤–Ω–µ—Å–µ–Ω—ñ'
        birthday = f"–¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (month-day): <code>{birthday}</code>"
        link_settings = ""
    else:
        birthday = user.birthday if user.birthday else '–¥–∞–Ω—ñ –Ω–µ –≤–Ω–µ—Å–µ–Ω—ñ'
        birthday = f"–¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: <code>{birthday}</code>"
        desc = "<b>üí≤ –∑–∞–¥—ñ—è–Ω–∏–π –¥–æ –∑–±–æ—Ä—ñ–≤</b>" if user_chat.status else "<b>üôÖ –Ω–µ –∑–∞–¥—ñ—è–Ω–∏–π –¥–æ –∑–±–æ—Ä—ñ–≤</b>"
        link_settings = f"\n{desc} <a href='{bot_link}?start=set-status-{user_chat.id}'>–∑–º—ñ–Ω–∏—Ç–∏</a>"
    text = f"<b>{user.first_name}</b>\n{username}{phone_number}{birthday}{link_settings}"
    return text


async def download_and_compress_image(
        url: str, max_size: int = 5 * 1024 * 1024, filename: str = "compressed_image.jpg") -> Optional[str]:
    """ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–∞ —Å—Ç–∏—Å–∫–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ URL —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É """
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as response:
                if response.status == 200:
                    image_data = await response.read()
                    image = Image.open(BytesIO(image_data))
                    quality = 85  # –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è

                    # –°—Ç–∏—Å–∫–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
                    while True:
                        output = BytesIO()
                        image.save(output, format='JPEG', quality=quality)
                        size = output.tell()
                        if size <= max_size or quality <= 10:
                            break
                        quality -= 5
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∏—Å–Ω–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
                    file = f"{media_file_path}/images/{filename}"
                    with open(file=file, mode='wb') as temp_file:
                        temp_file.write(output.getvalue())
                    return file
        except Exception as e:
            logger.error(f"Error downloading and compressing image {url}: {e}")
    return None


async def send_compressed_image(
        chat_id: int, url: str, caption: str=None, filename: str="compressed_image.jpg", disable_notification=True,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]]=None
) -> bool:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å—Ç–∏—Å–Ω–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram"""
    # temp_filename = "compressed_image.jpg" - –Ü–º'—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
    res = False
    file_path = await download_and_compress_image(url=url, filename=filename)
    if file_path:
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ FSInputFile –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram
            input_file = FSInputFile(file_path)
            await bot.send_photo(
                chat_id=chat_id, photo=input_file, caption=caption,
                reply_markup=reply_markup,
                disable_notification=disable_notification
            )
            res = True
        except Exception as e:
            logger.error(f"Error sending image: {e}")
        finally:
            """ –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª """
            if os.path.exists(file_path):
                os.remove(file_path)
    else:
        logger.error("Failed to compress and send image.")
    return res


async def check_admin(chat_pk: int, telegram_id: int, phone_number: str) -> bool:
    """ Check new admin by phone_number """
    chat = await get_chat_with_user(pk=chat_pk)
    if await check_user_in_group(telegram_id=telegram_id, chat_id=chat.chat_id):
        phone_number = validate_phone(phone_number=phone_number)
        if phone_number:
            new_admin = await get_user_by_phone(phone_number=phone_number)
            if new_admin:
                if await check_user_in_group(
                        telegram_id=new_admin.telegram_id, chat_id=chat.chat_id):
                    text = (f"–í—ñ—Ç–∞—î–º–æ, {new_admin.first_name}!\n–í–∏ —Å—Ç–∞–ª–∏ –Ω–æ–≤–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ü—å–æ–≥–æ —á–∞—Ç—É: "
                            f"<code>{chat.chat_id}</code>. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–≤–æ—é –±–∞–Ω–∫—ñ–≤—Å—å–∫—É –∫–∞—Ä—Ç–∫—É, —â–æ–± –ø—Ä–∏–π–º–∞—Ç–∏ –≤–Ω–µ—Å–∫–∏ "
                            f"–≤—ñ–¥ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —á–∞—Ç—É.")
                    reply_markup = InlineKeyboardMarkup(inline_keyboard=[b_my_groups(role='admin')])
                    photo = FSInputFile(path=f"{media_file_path}wellcome_admin.png")
                    await bot.send_photo(
                        chat_id=new_admin.telegram_id, photo=photo, caption=text, reply_markup=reply_markup)
                    new_admin.info = 'admin' if not new_admin.info else new_admin.info
                    await doc_update(doc=new_admin)
                    chat.user_id = new_admin.id
                    await doc_update(doc=chat)
                    return True
                else:
                    raise ValueError("–£ —á–∞—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É!")
            else:
                raise ValueError("–ó–∞ —Ü–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!")
        else:
            raise ValueError("–ù–µ –≤–∞–ª—ñ–¥–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É!")
    else:
        raise ValueError("–í–∏ –∞–±–æ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —á–∞—Ç—É!")


# import asyncio
# from config import telegram_sb
# url = 'https://uvaga.gov.ua/uk/asset/129568/1/1?129568/1'
# asyncio.run(send_compressed_image(chat_id=telegram_sb, url=url, caption='test'))